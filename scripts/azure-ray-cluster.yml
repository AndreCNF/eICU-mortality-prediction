# An unique identifier for the head node and workers of this cluster.
cluster_name: default

# The minimum number of workers nodes to launch in addition to the head
# node. This number should be >= 0.
min_workers: 3

# The maximum number of workers nodes to launch in addition to the head
# node. This takes precedence over min_workers.
max_workers: 3

# The initial number of worker nodes to launch in addition to the head
# node. When the cluster is first brought up (or when it is refreshed with a
# subsequent `ray up`) this number of nodes will be started.
initial_workers: 1

# Whether or not to autoscale aggressively. If this is enabled, if at any point
#   we would start more workers, we start at least enough to bring us to
#   initial_workers.
autoscaling_mode: default

# This executes all commands on all nodes in the docker container,
# and opens all the necessary ports to support the Ray cluster.
# Empty string means disabled.
docker:
    image: "" # e.g., tensorflow/tensorflow:1.5.0-py3
    container_name: "" # e.g. ray_docker
    # If true, pulls latest version of image. Otherwise, `docker run` will only pull the image
    # if no cached version is present.
    pull_before_run: True
    run_options: []  # Extra options to pass into "docker run"

# The autoscaler will scale up the cluster to this target fraction of resource
# usage. For example, if a cluster of 10 nodes is 100% busy and
# target_utilization is 0.8, it would resize the cluster to 13. This fraction
# can be decreased to increase the aggressiveness of upscaling.
# This value must be less than 1.0 for scaling to happen.
target_utilization_fraction: 0.8

# If a node is idle for this many minutes, it will be removed.
idle_timeout_minutes: 5

# Cloud-provider specific configuration.
provider:
    type: azure
    # https://azure.microsoft.com/en-us/global-infrastructure/locations
    location: westeurope
    resource_group: ray-cluster-2
    # set subscription id otherwise the default from az cli will be used
    # subscription_id: 00000000-0000-0000-0000-000000000000

# How Ray will authenticate with newly launched nodes.
auth:
    ssh_user: ubuntu
    # you must specify paths to matching private and public key pair files
    # use `ssh-keygen -t rsa -b 4096` to generate a new ssh key pair
    ssh_private_key: ~/.ssh/id_rsa
    ssh_public_key: ~/.ssh/id_rsa.pub

# Provider-specific config for the head node, e.g. instance type. By default
# Ray will auto-configure unspecified fields using example-full.yaml
head_node:
    azure_arm_parameters:
        vmSize: Standard_NC12s_v2
        # vmSize: Standard_NC6s_v2
        # vmSize: Standard_A4_v2 # Temporary VM instance so to be cheaper while testing
        # List images https://docs.microsoft.com/en-us/azure/virtual-machines/linux/cli-ps-findimage
        imagePublisher: microsoft-dsvm
        imageOffer: ubuntu-1804
        imageSku: 1804-gen2
        imageVersion: 20.02.01

# Provider-specific config for worker nodes, e.g. instance type. By default
# Ray will auto-configure unspecified fields using example-full.yaml
worker_nodes:
    azure_arm_parameters:
        vmSize: Standard_NC6s_v2
        # vmSize: Standard_A4_v2 # Temporary VM instance so to be cheaper while testing
        # List images https://docs.microsoft.com/en-us/azure/virtual-machines/linux/cli-ps-findimage
        imagePublisher: microsoft-dsvm
        imageOffer: ubuntu-1804
        imageSku: 1804-gen2
        imageVersion: 20.02.01
        # [TODO] If these worker nodes aren't automatically being set as spot instances,
        # try to fix it with the properties.priority parameter
        # https://docs.microsoft.com/en-us/rest/api/compute/virtualmachines/createorupdate#virtualmachineprioritytypes
        priority: Spot
        maxPrice: -1

# Files or directories to copy to the head and worker nodes. The format is a
# dictionary from REMOTE_PATH: LOCAL_PATH, e.g.
file_mounts: {
    '/home/ubuntu/': '/Users/andreferreira/Documents_Offline/GitHub/eICU-mortality-prediction/scripts'
#    "/path1/on/remote/machine": "/path1/on/local/machine",
}

# List of commands that will be run before `setup_commands`. If docker is
# enabled, these commands will run outside the container and before docker
# is setup.
initialization_commands:
    # get rid of annoying Ubuntu message
    - touch ~/.sudo_as_admin_successful

# List of shell commands to run to set up nodes.
setup_commands:
    # Consider uncommenting these if you also want to run apt-get commands during setup
    - sudo pkill -9 apt-get || true
    - sudo pkill -9 dpkg || true
    - sudo dpkg --configure -a
    # Install and setup gsutil in the nodes
    - echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
    - yes Y | sudo apt-get install apt-transport-https ca-certificates gnupg
    - curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -
    - yes Y | sudo apt-get update
    - yes Y | sudo apt-get install google-cloud-sdk
    - gcloud auth activate-service-account --key-file=/home/ubuntu/gcp-config.json
    # Download the data
    - gsutil -m cp gs://preprocessed-thesis-data/subset/* .
    # - gsutil -m cp gs://preprocessed-thesis-data/scripts/* .
    # Install the required packages
    # - yes Y | pip install -U ray
    # - ray || pip install -U https://s3-us-west-2.amazonaws.com/ray-wheels/latest/ray-0.9.0.dev0-cp36-cp36m-manylinux1_x86_64.whl
    - yes Y | pip install -r /home/ubuntu/requirements.txt
    # - yes Y | pip install comet_ml
    # - yes Y | pip install torch
    # Disable Comet ML's auto logging so as to prevent issues when importing packages
    - sudo touch /etc/profile.d/comet_auto_log.sh
    - sudo bash -c 'echo "export COMET_DISABLE_AUTO_LOGGING=1" > /etc/profile.d/comet_auto_log.sh'
    - sudo chmod +x /etc/profile.d/comet_auto_log.sh
    - printenv COMET_DISABLE_AUTO_LOGGING

# Custom commands that will be run on the head node after common setup.
head_setup_commands: []

# Custom commands that will be run on worker nodes after common setup.
worker_setup_commands: []

# Command to start ray on the head node. You don't need to change this.
head_start_ray_commands:
    - ray stop
    - ulimit -n 65536; ray start --head --redis-port=6379 --object-manager-port=8076 --autoscaling-config=~/ray_bootstrap_config.yaml

# Command to start ray on worker nodes. You don't need to change this.
worker_start_ray_commands:
    - ray stop
    - ulimit -n 65536; ray start --address=$RAY_HEAD_IP:6379 --object-manager-port=8076
